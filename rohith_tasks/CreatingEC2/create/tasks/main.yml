---
- name: create VPC
  ec2_vpc_net:
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr }}"
    region: "{{ region }}"
    state: present
  register: vpc
- debug:
        var: vpc

- name: Set VPC ID in variable
  set_fact:
    vpc_id: "{{ vpc.vpc.id }}"


- name: associate subnet to the VPC
  ec2_vpc_subnet:
   state: present
   vpc_id: "{{ vpc_id }}"
   region: "{{ region }}"
   az: us-west-2a
   cidr: "{{ subnet_cidr }}"
   map_public: yes
   resource_tags:
     Name: "{{ subnet_name }}"
  register: subnet
- debug: 
    var: subnet
- debug:
    var: subnet.id.stdout_lines

- name: create IGW
  ec2_vpc_igw:
   vpc_id: "{{ vpc_id }}"
   region: "{{ region }}"
   state: "present"
   tags:
     Name: "{{ igw_name }}"
  register: igw


- name: Route IGW
  ec2_vpc_route_table:
   vpc_id: "{{ vpc_id }}"
   region: "{{ region }}"
   subnets:
     - "{{ subnet_name }}"
   routes:
     - dest: 0.0.0.0/0
       gateway_id: "{{ igw.gateway_id  }}"
   tags:
     Name: "{{ route_name }}"


- name: Create security group
  ec2_group:
    name: "{{ project_name }}_security_group"
    description: "{{ project_name }} security group"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    rules:
      - proto: tcp  # ssh
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp  # http
        from_port: 8080
        to_port: 8080
        cidr_ip: 0.0.0.0/0
      - proto: tcp  # https
        from_port: 9000
        to_port: 9000
        cidr_ip: 0.0.0.0/0
      - proto: tcp  # https
        from_port: 8081
        to_port: 8081
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: security_group

- name: create a new ec2 key pair, returns generated private key
  ec2_key:
    name: "{{ key_name | default('project_name') }}-{{ demo_name | default('demo') }}-key"
    region: "{{ region }}"
  register: keypair
  tags:
   - ec2_key

- debug:
      var: keypair
  tags:
   - ec2_key

- name: Copy EC2 Key Pair private key locally
  copy: content="{{ keypair.key.private_key }}" dest="../aws-private.pem" mode=0600
  when: keypair.changed == true
  tags:
   - ec2_key


#- name: Create an EC2 key
#  ec2_key:
#    name: "{{ project_name }}-{{ env }}-key"
#    region: "{{ region }}"
#  register: ec2_key

#- name: Save private key
#  copy: content="{{ ec2_key.key.private_key }}" dest="../aws-private.pem" mode=0600
#  when: ec2_key.changed

#- name: Create an EC2 instance jenkins
#  ec2:
#    key_name: "{{ key_name | default('project_name') }}-{{ demo_name | default('demo') }}-key"
#    region: "{{ region | default('us-west-2') }}"
#    group_id: "{{ security_group.group_id  }}"
#    instance_type: "{{ instance_name | default('t2.medium') }}"
#    image: "{{ ami }}"
#    wait: yes
#    instance_tags: '{"Name":"{{ec2_tag_Name1}}","Type":"{{ec2_tag_Type1}}"}'
#    count_tag: '{"Name":"{{ec2_tag_Name1}}","Type":"{{ec2_tag_Type1}}"}'
#    count_tag: env
#    exact_count: 1
#    vpc_subnet_id: "{{ subnet.subnet.id }}"
#    assign_public_ip: yes
#    private_ip: "{{private_Ip | default('10.0.1.17') }}"
#  register: ec2
#- debug: var=item
#  with_items: "{{ ec2.instances }}"


- local_action: copy content='{"subnetId":"{{ subnet.subnet.id }}", "securityGroupId":"{{ security_group.group_id }}"}' dest="/root/Ansible-Automation/rohith_tasks/CreatingEC2/result.json" 
